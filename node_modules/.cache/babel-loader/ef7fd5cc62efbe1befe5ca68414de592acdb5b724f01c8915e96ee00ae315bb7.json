{"ast":null,"code":"var _jsxFileName = \"/home/chhabi/Desktop/MHM_MHM/frontend/src/Containers/DoctorAI/DoctorAI.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Box, TextField, Button, Typography } from \"@mui/material\";\nimport { makeStyles } from '@mui/styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  chatContainer: {\n    border: \"1px solid #ccc\",\n    margin: \"50px\",\n    padding: \"20px\",\n    height: \"400px\",\n    overflowY: \"auto\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    gap: \"15px\"\n  },\n  user: {\n    alignSelf: \"flex-end\",\n    color: \"blue\"\n  },\n  bot: {\n    alignSelf: \"flex-start\",\n    color: \"red\"\n  },\n  form: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    margin: \"20px 0\",\n    gap: \"15px\"\n  }\n});\nconst DcotorAI = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const endOfMessages = useRef(null);\n  const scrollToBottom = () => {\n    endOfMessages.current.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n  useEffect(scrollToBottom, [messages]);\n  const fetchResponse = async message => {\n    const response = await fetch(\"/apis/doctorai/\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        message: message\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await response.json();\n    return data;\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setMessages([...messages, {\n      text: input,\n      sender: \"user\"\n    }]);\n    const data = await fetchResponse(input);\n    setMessages(prevMessages => [...prevMessages, {\n      text: data.message,\n      sender: \"bot\"\n    }]);\n    setInput(\"\");\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    textAlign: \"center\",\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      className: classes.chatContainer,\n      children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(Typography, {\n        className: classes[message.sender],\n        children: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: endOfMessages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: classes.form,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        variant: \"outlined\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type a message\",\n        fullWidth: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(DcotorAI, \"P+3R0NSqtmAuCJnKok35QqPu50k=\");\n_c = DcotorAI;\nexport default DcotorAI;\nvar _c;\n$RefreshReg$(_c, \"DcotorAI\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Box","TextField","Button","Typography","makeStyles","jsxDEV","_jsxDEV","useStyles","chatContainer","border","margin","padding","height","overflowY","display","flexDirection","gap","user","alignSelf","color","bot","form","justifyContent","DcotorAI","_s","messages","setMessages","input","setInput","endOfMessages","scrollToBottom","current","scrollIntoView","behavior","fetchResponse","message","response","fetch","method","body","JSON","stringify","headers","data","json","handleSubmit","e","preventDefault","text","sender","prevMessages","textAlign","children","className","classes","map","index","fileName","_jsxFileName","lineNumber","columnNumber","ref","onSubmit","variant","value","onChange","target","placeholder","fullWidth","type","_c","$RefreshReg$"],"sources":["/home/chhabi/Desktop/MHM_MHM/frontend/src/Containers/DoctorAI/DoctorAI.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { Box, TextField, Button, Typography } from \"@mui/material\";\nimport { makeStyles } from '@mui/styles';\n\nconst useStyles = makeStyles({\n  chatContainer: {\n    border: \"1px solid #ccc\",\n    margin: \"50px\",\n    padding: \"20px\",\n    height: \"400px\",\n    overflowY: \"auto\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    gap: \"15px\"\n  },\n  user: {\n    alignSelf: \"flex-end\",\n    color: \"blue\"\n  },\n  bot: {\n    alignSelf: \"flex-start\",\n    color: \"red\"\n  },\n  form: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    margin: \"20px 0\",\n    gap: \"15px\"\n  }\n});\nconst DcotorAI = () => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const endOfMessages = useRef(null);\n\n  const scrollToBottom = () => {\n    endOfMessages.current.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(scrollToBottom, [messages]);\n\n  const fetchResponse = async (message) => {\n    const response = await fetch(\"/apis/doctorai/\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        message: message,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    const data = await response.json();\n    return data;\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setMessages([...messages, { text: input, sender: \"user\" }]);\n    const data = await fetchResponse(input);\n    setMessages((prevMessages) => [\n      ...prevMessages,\n      { text: data.message, sender: \"bot\" },\n    ]);\n    setInput(\"\");\n  };\n\n  return (\n    <Box textAlign=\"center\">\n      <Box className={classes.chatContainer}>\n        {messages.map((message, index) => (\n          <Typography key={index} className={classes[message.sender]}>\n            {message.text}\n          </Typography>\n        ))}\n        <div ref={endOfMessages} />\n      </Box>\n      <form onSubmit={handleSubmit} className={classes.form}>\n        <TextField\n          variant=\"outlined\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          placeholder=\"Type a message\"\n          fullWidth\n        />\n        <Button variant=\"contained\" color=\"primary\" type=\"submit\">Send</Button>\n      </form>\n    </Box>\n  );\n};\n\nexport default DcotorAI;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}