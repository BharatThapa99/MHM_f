{"ast":null,"code":"var _jsxFileName = \"/home/chhabi/Desktop/MHM_MHM/frontend/src/Containers/DoctorAI/DoctorAI.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Box, TextField, Button, Typography, Paper } from \"@mui/material\";\nimport styled from '@emotion/styled';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatContainer = styled(Box)({\n  border: \"1px solid #ccc\",\n  margin: \"50px\",\n  padding: \"20px\",\n  height: \"400px\",\n  overflowY: \"auto\",\n  display: \"flex\",\n  flexDirection: \"column\",\n  backgroundColor: \"black\",\n  gap: \"15px\"\n});\n_c = ChatContainer;\nconst MessagePaper = styled(Paper)({\n  padding: \"10px\",\n  width: \"fit-content\"\n});\nconst UserMessage = styled(MessagePaper)({\n  alignSelf: \"flex-end\",\n  backgroundColor: \"lightblue\"\n});\n_c2 = UserMessage;\nconst BotMessage = styled(MessagePaper)({\n  alignSelf: \"flex-start\",\n  backgroundColor: \"lightgreen\"\n});\n_c3 = BotMessage;\nconst Form = styled('form')({\n  display: \"flex\",\n  justifyContent: \"center\",\n  margin: \"20px 50px\",\n  gap: \"15px\"\n});\n_c4 = Form;\nconst DoctorAI = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const endOfMessages = useRef(null);\n  const scrollToBottom = () => {\n    endOfMessages.current.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n  useEffect(scrollToBottom, [messages]);\n  const fetchResponse = async message => {\n    const response = await fetch(\"/apis/doctorai/\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        message: message\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await response.json();\n    return data;\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setMessages([...messages, {\n      text: input,\n      sender: \"user\"\n    }]);\n    const data = await fetchResponse(input);\n    setMessages(prevMessages => [...prevMessages, {\n      text: data.message,\n      sender: \"bot\"\n    }]);\n    setInput(\"\");\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    textAlign: \"center\",\n    children: [/*#__PURE__*/_jsxDEV(ChatContainer, {\n      children: [messages.map((message, index) => message.sender === 'user' ? /*#__PURE__*/_jsxDEV(UserMessage, {\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          children: message.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 38\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(BotMessage, {\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          children: message.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 37\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: endOfMessages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        variant: \"outlined\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type a message\",\n        fullWidth: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s(DoctorAI, \"P+3R0NSqtmAuCJnKok35QqPu50k=\");\n_c5 = DoctorAI;\nexport default DoctorAI;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"ChatContainer\");\n$RefreshReg$(_c2, \"UserMessage\");\n$RefreshReg$(_c3, \"BotMessage\");\n$RefreshReg$(_c4, \"Form\");\n$RefreshReg$(_c5, \"DoctorAI\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Box","TextField","Button","Typography","Paper","styled","jsxDEV","_jsxDEV","ChatContainer","border","margin","padding","height","overflowY","display","flexDirection","backgroundColor","gap","_c","MessagePaper","width","UserMessage","alignSelf","_c2","BotMessage","_c3","Form","justifyContent","_c4","DoctorAI","_s","messages","setMessages","input","setInput","endOfMessages","scrollToBottom","current","scrollIntoView","behavior","fetchResponse","message","response","fetch","method","body","JSON","stringify","headers","data","json","handleSubmit","e","preventDefault","text","sender","prevMessages","textAlign","children","map","index","variant","fileName","_jsxFileName","lineNumber","columnNumber","ref","onSubmit","value","onChange","target","placeholder","fullWidth","color","type","_c5","$RefreshReg$"],"sources":["/home/chhabi/Desktop/MHM_MHM/frontend/src/Containers/DoctorAI/DoctorAI.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { Box, TextField, Button, Typography,Paper } from \"@mui/material\";\nimport styled from '@emotion/styled';\n\nconst ChatContainer = styled(Box)({\n  border: \"1px solid #ccc\",\n  margin: \"50px\",\n  padding: \"20px\",\n  height: \"400px\",\n  overflowY: \"auto\",\n  display: \"flex\",\n  flexDirection: \"column\",\n  backgroundColor: \"black\",\n  gap: \"15px\"\n});\n\nconst MessagePaper = styled(Paper)({\n  padding: \"10px\",\n  width: \"fit-content\"\n});\n\nconst UserMessage = styled(MessagePaper)({\n  alignSelf: \"flex-end\",\n  backgroundColor: \"lightblue\"\n});\n\nconst BotMessage = styled(MessagePaper)({\n  alignSelf: \"flex-start\",\n  backgroundColor: \"lightgreen\"\n});\n\nconst Form = styled('form')({\n  display: \"flex\",\n  justifyContent: \"center\",\n  margin: \"20px 50px\",\n  gap: \"15px\"\n});\nconst DoctorAI = () => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const endOfMessages = useRef(null);\n\n  const scrollToBottom = () => {\n    endOfMessages.current.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(scrollToBottom, [messages]);\n\n  const fetchResponse = async (message) => {\n    const response = await fetch(\"/apis/doctorai/\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        message: message,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    const data = await response.json();\n    return data;\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setMessages([...messages, { text: input, sender: \"user\" }]);\n    const data = await fetchResponse(input);\n    setMessages((prevMessages) => [\n      ...prevMessages,\n      { text: data.message, sender: \"bot\" },\n    ]);\n    setInput(\"\");\n  };\n\n  return (\n    <Box textAlign=\"center\">\n      <ChatContainer>\n        {messages.map((message, index) => \n          message.sender === 'user' ? \n            <UserMessage key={index}><Typography variant=\"body1\">{message.text}</Typography></UserMessage> :\n            <BotMessage key={index}><Typography variant=\"body1\">{message.text}</Typography></BotMessage>\n        )}\n        <div ref={endOfMessages} />\n      </ChatContainer>\n      <Form onSubmit={handleSubmit}>\n        <TextField\n          variant=\"outlined\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          placeholder=\"Type a message\"\n          fullWidth\n        />\n        <Button variant=\"contained\" color=\"primary\" type=\"submit\">Send</Button>\n      </Form>\n    </Box>\n  );\n};\n\nexport default DoctorAI;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}